"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Test = exports.TestRunStatus = void 0;
const axios_1 = __importDefault(require("axios"));
const fs = __importStar(require("fs"));
const child_process_1 = require("child_process");
const GRAPHQL_ENDPOINT = '/query';
const HOST = 'http://localhost:';
let SERVER_PORT = 6789;
const setHttpClient = () => __awaiter(void 0, void 0, void 0, function* () {
    const url = `${HOST}${SERVER_PORT}${GRAPHQL_ENDPOINT}`;
    return axios_1.default.create({
        baseURL: url,
        timeout: 30000,
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }
    });
});
var TestRunStatus;
(function (TestRunStatus) {
    TestRunStatus["RUNNING"] = "RUNNING";
    TestRunStatus["PASSED"] = "PASSED";
    TestRunStatus["FAILED"] = "FAILED";
    TestRunStatus["APP_HALTED"] = "APP_HALTED";
    TestRunStatus["USER_ABORT"] = "USER_ABORT";
    TestRunStatus["APP_FAULT"] = "APP_FAULT";
    TestRunStatus["INTERNAL_ERR"] = "INTERNAL_ERR";
})(TestRunStatus || (exports.TestRunStatus = TestRunStatus = {}));
const DEFAULT_RUN_OPTIONS = {
    delay: 5,
    debug: false,
    port: 6789,
    path: '.'
};
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
const Test = (appCmd, runOptions, callback) => __awaiter(void 0, void 0, void 0, function* () {
    const options = Object.assign(Object.assign({}, DEFAULT_RUN_OPTIONS), runOptions);
    // Start Keploy
    RunKeployServer(appCmd, options.delay, options.debug, SERVER_PORT);
    yield sleep(5000);
    let testResult = true;
    try {
        const testSets = yield FetchTestSets();
        if (!testSets) {
            throw new Error('No test sets found. Are you in the right directory?');
        }
        for (const testSet of testSets) {
            let result = true;
            const { appId, testRunId } = yield StartHooks();
            yield RunTestSet(testRunId, testSet, appId);
            yield StartUserApplication(appId);
            const reportPath = `${options.path}/keploy/reports/${testRunId}/${testSet}-report.yaml`;
            yield CheckReportFile(reportPath, options.delay + 15);
            let status = null;
            console.log(`Test set: ${testSet} is running`);
            while (true) {
                status = yield FetchTestSetStatus(testRunId, testSet);
                if (status === TestRunStatus.RUNNING) {
                }
                else {
                    break;
                }
            }
            if (status !== TestRunStatus.PASSED) {
                result = false;
                console.error(`Test set: ${testSet} failed with status: ${status}`);
                break;
            }
            else {
                result = true;
                console.log(`Test set: ${testSet} passed`);
            }
            testResult = testResult && result;
            yield StopUserApplication(appId);
        }
    }
    catch (error) {
        callback(error, false);
    }
    finally {
        yield StopKeployServer();
        yield sleep(3000);
        callback(null, testResult);
    }
});
exports.Test = Test;
const StartUserApplication = (appId) => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield setHttpClient();
    const response = yield client.post('', {
        query: `mutation StartApp { startApp(appId: ${appId}) }`
    });
    if (!(response.status >= 200 && response.status < 300 && response.data.data.startApp)) {
        throw new Error(`Failed to start user application. Status code: ${response.status}`);
    }
});
const StartHooks = () => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield setHttpClient();
    const response = yield client.post('', {
        query: `mutation StartHooks { startHooks { appId testRunId } }`
    });
    if (response.status >= 200 && response.status < 300 && response.data.data.startHooks) {
        return {
            appId: response.data.data.startHooks.appId,
            testRunId: response.data.data.startHooks.testRunId
        };
    }
    else {
        throw new Error(`Failed to start hooks. Status code: ${response.status}`);
    }
});
const RunTestSet = (testRunId, testSet, appId) => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield setHttpClient();
    const response = yield client.post('', {
        query: `mutation RunTestSet { runTestSet(testSetId: "${testSet}", testRunId: "${testRunId}", appId: ${appId}) }`
    });
    if (!(response.status >= 200 && response.status < 300 && response.data.data.runTestSet)) {
        throw new Error(`Failed to run test set. Status code: ${response.status}`);
    }
});
const CheckReportFile = (reportPath, timeout) => __awaiter(void 0, void 0, void 0, function* () {
    const startTime = Date.now();
    while (Date.now() - startTime < timeout * 1000) {
        if (fs.existsSync(reportPath)) {
            return;
        }
        yield new Promise(res => setTimeout(res, 1000));
    }
    throw new Error(`Report file not created within ${timeout} seconds`);
});
const FetchTestSetStatus = (testRunId, testSet) => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield setHttpClient();
    const response = yield client.post('', {
        query: `query GetTestSetStatus { testSetStatus(testRunId: "${testRunId}", testSetId: "${testSet}") { status } }`
    });
    if (response.status >= 200 && response.status < 300 && response.data.data.testSetStatus) {
        return response.data.data.testSetStatus.status;
    }
    else {
        throw new Error(`Failed to fetch test set status. Status code: ${response.status}`);
    }
});
const StopUserApplication = (appId) => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield setHttpClient();
    const response = yield client.post('', {
        query: `mutation StopApp { stopApp(appId: ${appId}) }`
    });
    if (!(response.status >= 200 && response.status < 300 && response.data.data.stopApp)) {
        throw new Error(`Failed to stop user application. Status code: ${response.status}`);
    }
});
const StopKeployServer = () => __awaiter(void 0, void 0, void 0, function* () {
    const client = yield setHttpClient();
    const response = yield client.post('', {
        query: `mutation { stopHooks }`
    });
    if (!(response.status >= 200 && response.status < 300 && response.data.data.stopHooks)) {
        throw new Error(`Failed to stop Keploy server. Status code: ${response.status}`);
    }
});
const RunKeployServer = (appCmd, delay, debug, port) => {
    const command = `sudo -E env "PATH=$PATH" /usr/local/bin/keploybin test -c "${appCmd}" --coverage --delay ${delay} --port ${port} ${debug ? '--debug' : ''}`;
    const keployProcess = (0, child_process_1.spawn)(command, { shell: true });
    // Log stdout
    keployProcess.stdout.on('data', (data) => {
        const log = data.toString();
        console.log(log);
    });
    // Log stderr
    keployProcess.stderr.on('data', (data) => {
        const log = data.toString(); // Convert Buffer to string and trim whitespace
        console.error(log);
    });
    keployProcess.on('error', (error) => {
        console.error(`Error starting Keploy server: ${error}`);
    });
    keployProcess.on('close', (code) => {
        if (code !== 0) {
            console.error(`Keploy server exited with code ${code}`);
        }
    });
};
const FetchTestSets = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const client = yield setHttpClient();
        const response = yield client.post('', {
            query: "{ testSets }"
        });
        if (response.status >= 200 && response.status < 300) {
            return response.data.data.testSets;
        }
        else {
            console.error(`Error fetching test sets: Status code ${response.status}`);
            return null;
        }
    }
    catch (error) {
        console.error(`Error fetching test sets: ${error}`);
        return null;
    }
});
